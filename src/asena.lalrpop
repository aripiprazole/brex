use std::str::FromStr;
use lalrpop_util::ParseError;
use substring::Substring;
use crate::syntax::Exp;
use crate::syntax::Ident;
use crate::syntax::Prim;
use crate::leak::leak_string;
use crate::parsing::parse_number;

grammar;

pub Term: Exp = {
    Atom => Exp::Atom(Ident(<>)),
    Number => Exp::Prim(<>),
    Str => Exp::Prim(<>),
    "(" <t:Term*> ")" => t.into_iter().rfold(Exp::Nil, |acc, x| Exp::Cons(Box::new(x), Box::new(acc))),
};

Number: Prim = r"[0-9]+(.[0-9]+)?" =>? parse_number(<>)
  .map_err(|error| ParseError::User {
    error: leak_string(error),
  });
Atom: &'static str = r"[^()\r\n\t0-9' ][^()\r\n\t' ]*" => leak_string(<>.to_string());
Str: Prim = r#"'(?:[^"\\]++|\\.)*+'"# => Prim::String(<>.substring(1, <>.len() - 1).to_string());
